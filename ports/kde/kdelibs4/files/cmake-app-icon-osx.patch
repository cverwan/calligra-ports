--- kdelibs-4.9.3/cmake/modules/KDE4Macros.cmake.orig	2012-08-13 04:42:27.000000000 -0400
+++ kdelibs-4.9.3/cmake/modules/KDE4Macros.cmake	2012-12-16 01:48:01.000000000 -0500
@@ -818,7 +818,13 @@
 
       set_target_properties(kdeinit_${_target_NAME} PROPERTIES OUTPUT_NAME kdeinit4_${_target_NAME})
 
-      kde4_add_executable(${_target_NAME} "${_nogui}" ${CMAKE_CURRENT_BINARY_DIR}/${_target_NAME}_dummy.cpp)
+      if (Q_WS_MAC)
+	      list(FIND _SRCS *.icns _icon_position)
+	      if(NOT _res_position EQUAL -1)
+		      list(GET _SRCS ${_icon_position} _resourcefile)
+	      endif(NOT _res_position EQUAL -1)
+      endif (Q_WS_MAC)
+      kde4_add_executable(${_target_NAME} "${_nogui}" ${CMAKE_CURRENT_BINARY_DIR}/${_target_NAME}_dummy.cpp ${_resourcefile})
       target_link_libraries(${_target_NAME} kdeinit_${_target_NAME})
    endif(WIN32)
 
@@ -1201,27 +1207,101 @@
         endif(PNG2ICO_EXECUTABLE)
     endif(WIN32)
     if (Q_WS_MAC)
-        # first convert image to a tiff using the Mac OS X "sips" utility,
-        # then use tiff2icns to convert to an icon
-        find_program(SIPS_EXECUTABLE NAMES sips)
-        find_program(TIFF2ICNS_EXECUTABLE NAMES tiff2icns)
-        if (SIPS_EXECUTABLE AND TIFF2ICNS_EXECUTABLE)
-            file(GLOB_RECURSE files  "${pattern}")
-            # we can only test for the 128-icon like that - we don't use patterns anymore
+        # first generate .iconset directory structure, then convert to .icns format using the Mac OS X "iconutil" utility,
+        # to create retina compatible icon, you need png source files in pixel resolution 16x16, 32x32, 64x64, 128x128,
+	# 256x256, 512x512, 1024x1024
+	find_program(ICONUTIL_EXECUTABLE NAMES iconutil)
+	if (ICONUTIL_EXECUTABLE)
+	    file(GLOB_RECURSE files  "${pattern}")
+	    message(STATUS "Icon files for ${appsources}: ${files}")
+	    add_custom_command(OUTPUT ${_outfilename}.iconset
+		    COMMAND ${CMAKE_COMMAND} -E make_directory ${_outfilename}.iconset
+			       DEPENDS ${files}
+                               )
             foreach (it ${files})
-                if (it MATCHES ".*128.*" )
-                    set (_icon ${it})
+                if (it MATCHES ".*16.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_16x16.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_16x16.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_16x16.png)
+                endif (it MATCHES ".*16.*")
+		if (it MATCHES ".*32.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_16x16@2x.png
+					${_outfilename}.iconset/icon_32x32.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_16x16@2x.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_32x32.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_16x16@2x.png
+				${_outfilename}.iconset/icon_32x32.png)
+                endif (it MATCHES ".*32.*")
+		if (it MATCHES ".*64.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_32x32@2x.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_32x32@2x.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_32x32@2x.png)
+                endif (it MATCHES ".*64.*")
+		if (it MATCHES ".*128.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_128x128.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_128x128.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_128x128.png)
                 endif (it MATCHES ".*128.*")
+		if (it MATCHES ".*256.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_128x128@2x.png
+					${_outfilename}.iconset/icon_256x256.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_128x128@2x.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_256x256.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_128x128@2x.png
+				${_outfilename}.iconset/icon_256x256.png)
+                endif (it MATCHES ".*256.*")
+		if (it MATCHES ".*512.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_256x256@2x.png
+					${_outfilename}.iconset/icon_512x512.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_256x256@2x.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_512x512.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_256x256@2x.png
+				${_outfilename}.iconset/icon_512x512.png)
+                endif (it MATCHES ".*512.*")
+		if (it MATCHES ".*1024.*" )
+			add_custom_command(
+				OUTPUT ${_outfilename}.iconset/icon_512x512@2x.png
+				COMMAND ${CMAKE_COMMAND} -E copy ${it} icon_512x512@2x.png
+				WORKING_DIRECTORY ${_outfilename}.iconset
+				DEPENDS ${_outfilename}.iconset
+				)
+			list (APPEND _icons ${_outfilename}.iconset/icon_512x512@2x.png)
+                endif (it MATCHES ".*1024.*")		
             endforeach (it)
 
-            if (_icon)
+            if (_icons)
                 
-                # first, get the basename of our app icon
-                add_custom_command(OUTPUT ${_outfilename}.icns ${outfilename}.tiff
-                                   COMMAND ${SIPS_EXECUTABLE} -s format tiff ${_icon} --out ${outfilename}.tiff
-                                   COMMAND ${TIFF2ICNS_EXECUTABLE} ${outfilename}.tiff ${_outfilename}.icns
-                                   DEPENDS ${_icon}
-                                   )
+                # generate .icns icon file
+                add_custom_command(
+			OUTPUT ${_outfilename}.icns
+			COMMAND ${ICONUTIL_EXECUTABLE} --convert icns --output ${_outfilename}.icns
+				${_outfilename}.iconset
+                        DEPENDS ${_icons}
+                        )
 
                 # This will register the icon into the bundle
                 set(MACOSX_BUNDLE_ICON_FILE ${appsources}.icns)
@@ -1233,14 +1313,13 @@
                 # Install the icon into the Resources dir in the bundle
                 set_source_files_properties(${_outfilename}.icns PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
 
-            else(_icon)
-                # TODO - try to scale a non-128 icon...? Try to convert an SVG on the fly?
-                message(STATUS "Unable to find an 128x128 icon that matches pattern ${pattern} for variable ${appsources} - application will not have an application icon!")
-            endif(_icon)
-
-        else(SIPS_EXECUTABLE AND TIFF2ICNS_EXECUTABLE)
-            message(STATUS "Unable to find the sips and tiff2icns utilities - application will not have an application icon!")
-        endif(SIPS_EXECUTABLE AND TIFF2ICNS_EXECUTABLE)
+            else(_icons)
+    		    message(STATUS "Unable to find an icon that matches pattern ${pattern} for variable ${appsources} - application will not have an application icon!")
+            endif(_icons)
+
+    	else(ICONUTIL_EXECUTABLE)
+            message(STATUS "Unable to find the iconutil utility - application will not have an application icon!")
+    	endif(ICONUTIL_EXECUTABLE)
     endif(Q_WS_MAC)
 endmacro (KDE4_ADD_APP_ICON)
 
